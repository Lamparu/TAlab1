%class AppClass

%start MainMap::Start

%map MainMap
%%
Default {
    Start                       Start       { ClearSMC(); }
    Letter (ch: String)         Error       { Unacceptable(); }
    Zero (ch: String)           Error       { Unacceptable(); }
    Digital (ch: String)        Error       { Unacceptable(); }
    EqSign                      Error       { Unacceptable(); }
    OpSign                      Error       { Unacceptable(); }
    MinSign                     Error       { Unacceptable(); }
    Unknown                     Error       { Unacceptable(); }
    SpaceSym                    Error       { Unacceptable(); }
}

Start {
    EOS                         Error         { Unacceptable(); }
    Digital (ch: String)        StrNum        { InsertDigstr(ch); }
    SpaceSym                    Start         {}
}

Space {
    EOS                     [ctxt.OperSignIsUsed()]                                    Error       { Unacceptable(); }
    SpaceSym                                                                           Space       {}
    Letter  (ch: String)    [ctxt.isCounterZero()]                                     StrLit      { InsertValname(ch); LengthInc();  }
    Letter  (ch:String)     [ctxt.EqSignIsUsed() and ctxt.isCountTermsOne()]           StrLit      { ClearLitstr(); InsertLitstr(ch); LengthInc();  }
    Letter  (ch:String)     [ctxt.OperSignIsUsed() and ctxt.isCountTermsMoreOne()]     StrLit      { ClearLitstr(); InsertLitstr(ch); LengthInc(); }
    Digital (ch: String)    [ctxt.EqSignIsUsed() and ctxt.isCountTermsOne()]           StrDig      { LengthInc(); }
    Digital (ch: String)    [ctxt.OperSignIsUsed() and ctxt.isCountTermsMoreOne()]     StrDig      { LengthInc();  }
    EqSign                  [ctxt.EqSignIsNotUsed()]                                   EqualSign   { UseEqSign(); }
    OpSign                  [ctxt.EqSignIsUsed()]                                      OperSign    { UseOperSign(); }
    MinSign                 [ctxt.OperSignIsUsed() or ctxt.isCountTermsOne() and ctxt.EqSignIsUsed()]          MinusSign   {}
    MinSign                 [ctxt.EqSignIsUsed()]                                      OperSign    { UseOperSign(); }
    EOS                     [ctxt.isCounterMoreOrOne()]                                OK          { Acceptable(); }

}

StrDig {
    EOS                                                 Error       { Unacceptable(); }
    Digital     (ch: String)    [ctxt.isLess16()]       nil         { LengthInc(); }
    Zero        (ch: String)    [ctxt.isLess16()]       nil         { LengthInc(); }
    SpaceSym                                            Space       { ClearOperSign(); LengthZero(); CountTermsInc(); }
    EOS                                                 OK          { Acceptable(); CountTermsInc(); }
}

StrNum {
    EOS                         Error       { Unacceptable(); }
    Digital (ch: String)        nil         { InsertDigstr(ch); }
    Zero    (ch: String)        nil         { InsertDigstr(ch); }
    SpaceSym                    Space       {}
}

StrLit {
    EOS                                                                         Error          { Unacceptable(); }
    Letter  (ch: String)    [ctxt.isLess16() and ctxt.isCounterMoreOrOne()]     nil            { InsertLitstr(ch); LengthInc(); }
    Digital (ch: String)    [ctxt.isLess16() and ctxt.isCounterMoreOrOne()]     nil            { InsertLitstr(ch); LengthInc(); }
    Letter  (ch: String)    [ctxt.isLess16()]                                   nil            { InsertValname(ch); LengthInc(); }
    Digital (ch: String)    [ctxt.isLess16()]                                   nil            { InsertValname(ch); LengthInc(); }
    Zero    (ch: String)    [ctxt.isLess16() and ctxt.isCounterMoreOrOne()]     nil            { InsertLitstr(ch); LengthInc(); }
    Zero    (ch: String)    [ctxt.isLess16()]                                   nil            { InsertValname(ch); LengthInc(); }
    EOS                     [ctxt.isCounterMoreOrOne() and ctxt.CheckNames()]   OK             { Acceptable(); CounterInc(); CountTermsInc();}
    SpaceSym                [ctxt.CheckNames() and ctxt.isLess16()]             Space          { ClearOperSign(); LengthZero(); CounterInc(); CountTermsInc();}
}

EqualSign {
    EOS             Error       { Unacceptable(); }
    SpaceSym        Space       { }
}

OperSign {
    EOS             Error       { Unacceptable(); }
    SpaceSym        Space       { }
}

MinusSign {
    SpaceSym                 Error           { Unacceptable(); }
    EOS                      Error           { Unacceptable(); }
    Digital (ch: String)     StrDig          { LengthInc(); }
}

Error {
    EOS         nil             { Unacceptable(); }
}

OK {
    EOS         nil             { Acceptable(); InsertValnameinDict(); }
}
%%